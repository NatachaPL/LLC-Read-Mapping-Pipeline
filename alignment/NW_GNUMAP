package alignment;

import core.Read;

/**
 * Implementation of the modified version of the Needleman-Wunsch algorithm according with GNUMAP 
 *
 */
public class NW_GNUMAP extends Aligner {
	
	protected int[][] sM;
	
	public NW_GNUMAP(char[] g_seq, Read read) {
		super(g_seq, read);
		sM = new int[][]{{1, -1, -1, -1, 0}, {-1, 1, -1, -1, 0}, {-1, -1, 1, -1, 0}, {-1, -1, -1, 1, 0}, {0, 0, 0, 0, 0}};
		
	}
	
	private int basePosition(char c) {
		//Each base character has its place in similarity matrix.
		switch (c) {
		case 'A':
			return 0;
		case 'C':
			return 1;
		case 'G':
			return 2;
		case 'T':
			return 3;
		}
		return 4;
	}

	 /**
	 * @param int i - index at the matrix line with the scores for the genomic sequence
	 * @param int j - index at the matrix column with the scores for the read sequence
	 *
	 * Note: These scores start at index 1 whereas the array of bases start at index 0
	 *
	 * @return the score which accounts the probability of each base being correct and 
	 * the similarity matrix.
	 */
	protected float weight(int i, int j) {
		
		float score = 0;
		
		float toA = (float) (read.getProbability(j-1, 'A') * sM[basePosition(g_seq[i-1])][0]);
		float toC = (float) (read.getProbability(j-1, 'C') * sM[basePosition(g_seq[i-1])][1]);
		float toG = (float) (read.getProbability(j-1, 'G') * sM[basePosition(g_seq[i-1])][2]);
		float toT = (float) (read.getProbability(j-1, 'T') * sM[basePosition(g_seq[i-1])][3]);
		
		score = toA + toC + toG + toT;
		
//		if(DEBUG) {
//		System.err.println(read.getSeqAlign()[j-1] +"   "+  g_seq[i-1]);
//		System.err.println(read.getSeq().toCharArray()[j-1]);
//		System.err.println("A: " + read.getProbability(j-1, 'A') + " x " + sM[basePosition(g_seq[i-1])][0] + " = " + toA);
//		System.err.println("C: " + read.getProbability(j-1, 'C') + " x " + sM[basePosition(g_seq[i-1])][1] + " = " + toC);
//		System.err.println("G: " + read.getProbability(j-1, 'G') + " x " + sM[basePosition(g_seq[i-1])][2] + " = " + toG);
//		System.err.println("T: " + read.getProbability(j-1, 'T') + " x " + sM[basePosition(g_seq[i-1])][3] + " = " + toT);
//		System.err.println("Score = " + score);		
//		}	
		
		return score;
	}

	
	protected int gap() {
		return  -4;
	}
}
